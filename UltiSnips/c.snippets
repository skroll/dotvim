###########################################################################
#                            C Snippets                                   #
###########################################################################

snippet def "#define ..."
#define ${1}
endsnippet

snippet ifndef "#ifndef ... #define ... #endif"
#ifndef ${1/([A-Za-z0-9_]+).*/$1/}
#define ${1:SYMBOL} ${2:value}
#endif
endsnippet

snippet #if "#if #endif" !b
#if ${1:0}
${VISUAL}${0:${VISUAL/(.*)/(?1::code)/}}
#endif
endsnippet

snippet inc "#include local header (inc)"
#include "${1:`!p snip.rv = snip.basename`}.h"
endsnippet

snippet Inc "#include <> (Inc)"
#include <${1}.h>
endsnippet

snippet main "main() (main)" !b
int main( int          argc,
          const char **argv )
{
	${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
	return 0;
}
endsnippet

snippet for "for loop (fori)"
for ( ${2:i} = 0; $2 < ${1:count}; ${3:++$2} ) {
	${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
}
endsnippet

snippet enum "Enumeration"
enum ${1:name} { $0 };
endsnippet

snippet once "Include header once only guard" !b
#ifndef ${1:`!p
if not snip.c:
	import random, string
	name = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()
	rand = ''.join(random.sample(string.ascii_letters+string.digits, 8))
	snip.rv = ('%s_%s' % (name,rand)).upper()
else:
	snip.rv = snip.c`}
#define $1

${0}

#endif /* $1 */

endsnippet

snippet td "typedef"
typedef ${1:int} ${2:mytype_t};
endsnippet

snippet do "do...while loop (do)"
do {
	${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
} while( ${1:/* condition */} );
endsnippet

snippet if "if .. (if)"
if ( ${1:/* condition */ ) {
	${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
}
endsnippet

snippet ife "if .. else (ife)"
if ( ${1:/* condition */} ) {
	${2:/* code */}
} else {
	${3:/* else */}
}
endsnippet

snippet st "struct"
struct ${1:`!p snip.rv = (snip.basename or "name")`}_s {
	${0:/* data */}
};
endsnippet

snippet tdst "typedef struct"
typedef struct ${1:`!p snip.rv = (snip.basename or "name")`}_s {
	${0:/* data */}
} $1_t;
endsnippet

